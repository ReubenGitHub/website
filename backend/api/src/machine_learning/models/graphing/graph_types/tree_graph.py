from ..encode_image import encode_graph_image
from sklearn import tree
import pydotplus
import re

def generate_tree_graph(
    model,
    model_type,
    problem_type,
    continuous_features,
    categorical_features,
    result_categories_map
):
    """
    Generate a tree graph of a decision tree model.

    This function creates a plot showing the structure of the decision tree.

    Parameters
    ----------
    model : object
        The trained decision tree model to generate predictions from.
    model_type : str
        The type of model.
    problem_type : str
        The type of problem, either 'classification' or 'regression'.
    continuous_features : list of str
        The names of the continuous feature columns.
    categorical_features : list of str
        The names of the categorical feature columns.
    result_categories_map : dict
        A mapping from result categories to the encoded values.

    Returns
    -------
    str
        The base64 encoded image of the plot.
    """
    can_create_tree_graph = (model_type == 'DT')

    if (not can_create_tree_graph):
        raise ValueError(f'Cannot create tree graph for model type {problem_type}.')

    features = continuous_features + categorical_features
    class_names = list(result_categories_map) if result_categories_map is not None else None

    # Extract data from model
    data = tree.export_graphviz(
        model,
        out_file=None,
        feature_names=features,
        class_names=class_names,
        max_depth=4,
        filled=True
    )

    # Generate tree
    graph = pydotplus.graph_from_dot_data(data)

    # Remove display values
    remove_display_values_from_tree_nodes(graph)

    # Encode image
    graph_image_base_64 = encode_graph_image('graph', graph)

    return graph_image_base_64

def remove_display_values_from_tree_nodes(graph):
    """
    Remove display values from tree graph nodes.

    This function removes the display values from the nodes of a tree graph generated by
    scikit-learn's DecisionTreeClassifier or DecisionTreeRegressor.

    Parameters
    ----------
    graph : object
        The tree graph object generated by scikit-learn's DecisionTreeClassifier or
        DecisionTreeRegressor.
    """
    for node in graph.get_node_list():
        label = node.get('label')
        if label:
            # Assumes values are in "value = [...]" format, remove "value = [...]\\n"
            newLabel = re.sub(r"value = \[.*?\]\\n", "", label)
            node.set('label', newLabel)
